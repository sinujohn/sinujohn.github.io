<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jpa on Sinu John</title>
    <link>https://sinujohn.github.io/tags/jpa/</link>
    <description>Recent content in jpa on Sinu John</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-SA 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 05 Sep 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sinujohn.github.io/tags/jpa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JPA - Part 3</title>
      <link>https://sinujohn.github.io/2013/09/05/jpa-part-3/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/09/05/jpa-part-3/</guid>
      <description>Go to Part 1. Callback Methods When insert, update and delete occurs, we can listen to those events and call some methods when such events occur. Callback methods should be prefixed by following annotations:  @PrePersist - called before persist() @PostPersist - called after persist() @PreRemove - called before remove() @PostRemove - called after commit() @PreUpdate - called before commit() @PostUpdate - called after commit()  Â More than one annotation can applied to a single method.</description>
    </item>
    
    <item>
      <title>JPA - Part 2</title>
      <link>https://sinujohn.github.io/2013/09/01/jpa-part-2/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/09/01/jpa-part-2/</guid>
      <description>This is continued from JPA: part 1. Other Annotations:  @Table(name = &amp;ldquo;TABLENAME&amp;rdquo;)  Used before class name to explicitly specify table name.   @Column(name = &amp;ldquo;COLUMN_NAME&amp;rdquo;)  Used before instance variables to explicitly set column names.    Example:
@Entity @Table(name = &amp;quot;EMP&amp;quot;) public class Employee { @Id @Column(name = &amp;quot;EMP_ID&amp;quot;) private int id; @Column(name = &amp;quot;EMP_NAME&amp;quot;) private String name; //getters and setters }  this maps to Table: EMP</description>
    </item>
    
    <item>
      <title>JPA - Part 1</title>
      <link>https://sinujohn.github.io/2013/08/31/jpa-part-1/</link>
      <pubDate>Sat, 31 Aug 2013 00:10:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/08/31/jpa-part-1/</guid>
      <description>This post is part of Project Digitisation. I have decided to write about JPA in several posts. This is part 1 of the series. JPA - Java Persistence API JPA is a specification. There are several implementations like Hibernate, TopLink etc. Persisting objects in DB is an integral part of Enterprise applications. JPA provides:  ORM (Object Relation Mapping) i.e. it maps an Object to a Relation(Table).  An Object which can be mapped is called an Entity   JPQL - Java Persistence Query Language  Entity classes should be Java beans (POJOs with private variables and public getters and setters).</description>
    </item>
    
  </channel>
</rss>