<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>observer pattern on Sinu John</title>
    <link>https://sinujohn.github.io/tags/observer-pattern/</link>
    <description>Recent content in observer pattern on Sinu John</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-SA 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 09 Jul 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sinujohn.github.io/tags/observer-pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Observer Pattern</title>
      <link>https://sinujohn.github.io/2013/07/09/observer-pattern/</link>
      <pubDate>Tue, 09 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/07/09/observer-pattern/</guid>
      <description>Classification: Behavioral patterns Description : Define a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically.
This pattern is sometimes referred to as Listeners in some frameworks.
Read about the pattern here. The code sample can be found in my git repo.
In the example code I have done, there is a city, as with all cities many things can go wrong in a city.</description>
    </item>
    
  </channel>
</rss>