<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on Sinu John</title>
    <link>https://sinujohn.github.io/tags/spring/</link>
    <description>Recent content in spring on Sinu John</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-SA 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 26 Apr 2020 21:22:16 +0530</lastBuildDate>
    
	<atom:link href="https://sinujohn.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Cloud Stream - using Functional constructs</title>
      <link>https://sinujohn.github.io/2020/04/26/spring-cloud-stream-using-functional-constructs/</link>
      <pubDate>Sun, 26 Apr 2020 21:22:16 +0530</pubDate>
      
      <guid>https://sinujohn.github.io/2020/04/26/spring-cloud-stream-using-functional-constructs/</guid>
      <description>Preface Spring Cloud Stream provides a framework to implement messaging in a clean way. The new version 3 brings functional paradigm to the Spring Cloud Stream framework where previously the annotations were used for the same. Docs explain it way better, but I will provide a succint way to get started. Read this after going through the docs. In this blog, I chose Kafka as the message broker.
Getting Started Add Dependencies  Cloud Stream Kafka  Adding Cloud Stream, lets us create Beans of type Function, Consumer or Supplier.</description>
    </item>
    
    <item>
      <title>Certified Spring Professional</title>
      <link>https://sinujohn.github.io/2015/09/19/certified-spring-professional/</link>
      <pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2015/09/19/certified-spring-professional/</guid>
      <description>Now am a Pivotal Certified Spring Professional. Took the exam yesterday in Core Spring (Spring 4.0) and received the certificate today.</description>
    </item>
    
    <item>
      <title>Creating collection of Spring Beans</title>
      <link>https://sinujohn.github.io/2014/09/04/creating-collection-of-spring-beans/</link>
      <pubDate>Thu, 04 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/09/04/creating-collection-of-spring-beans/</guid>
      <description>Some times there might arise situations where you want to create a number of Spring Beans, but you don&#39;t know how many beans are there at coding time.
Usually, you create a Spring bean as follows:
 But what if you want to create 50 such beans which differ only in the argument supplied to the constructor? Or a similar case arise where the number of beans to be created cannot be determined at coding time?</description>
    </item>
    
    <item>
      <title>Spring AOP</title>
      <link>https://sinujohn.github.io/2014/07/03/spring-aop/</link>
      <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/07/03/spring-aop/</guid>
      <description>I was doing some Spring AOP stuff the other day using @AspectJ style annotations. One of the limitations of Spring AOP is that it supports only method level interception. We cannot intercept Constructors or fields. For that we&#39;ll have to use AspectJ, and different compilers may be - for load time weaving or compile time weaving. I decided to stick to Spring restrictions though.
Here are a couple of cheatsheets/examples for AspectJ.</description>
    </item>
    
    <item>
      <title>Creating a Maven Spring-REST project</title>
      <link>https://sinujohn.github.io/2014/02/19/creating-a-maven-spring-rest-project/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/02/19/creating-a-maven-spring-rest-project/</guid>
      <description>Open Eclipse. Make sure it is a recent version with m2e integration. I am using Kepler version of Eclipse. Now go to File &amp;gt; New &amp;gt; Maven Project. Click Next. Select maven-archetype-webapp. Click Next. Enter GroupID (group ID is the name that refers to a group of projects. It should be unique. A name like &amp;lsquo;com.companyname.yourname&amp;rsquo; would be suffice) and Artifact ID (Artifact ID is the project name. It should be unique within a groupID).</description>
    </item>
    
  </channel>
</rss>