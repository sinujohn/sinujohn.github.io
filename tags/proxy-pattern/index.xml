<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>proxy pattern on Sinu John</title>
    <link>https://sinujohn.github.io/tags/proxy-pattern/</link>
    <description>Recent content in proxy pattern on Sinu John</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-SA 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 09 Jun 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sinujohn.github.io/tags/proxy-pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Proxy Pattern</title>
      <link>https://sinujohn.github.io/2013/06/09/proxy-pattern/</link>
      <pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/06/09/proxy-pattern/</guid>
      <description>Classification: Structural Pattern(Proxy), Creational Pattern(Lazy Initialization)
Find the code example here.
In this pattern, we create a proxy for the original class that we are trying to use. This class will have all the methods(which we are interested in) of the original class and may or may not have extra methods. When we say proxy has the methods of original object, we mean the method signature. So using proxy object will be similar to using the real object.</description>
    </item>
    
  </channel>
</rss>