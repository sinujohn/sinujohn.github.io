<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Hack</title>
    <link>https://sinujohn.github.io/tags/java/index.xml</link>
    <description>Recent content in Java on Hack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [PPOffice](http://github.com/ppoffice).</copyright>
    <atom:link href="https://sinujohn.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java - Add lib folder to classpath</title>
      <link>https://sinujohn.github.io/2016/06/01/java-add-lib-folder-to-classpath/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2016/06/01/java-add-lib-folder-to-classpath/</guid>
      <description>&lt;p&gt;Adding non standard, non-maven, custom jars in a maven project is a common issue. And &lt;a href=&#34;http://stackoverflow.com/questions/364114/can-i-add-jars-to-maven-2-build-classpath-without-installing-them&#34; target=&#34;_blank&#34;&gt;this SO post&lt;/a&gt; is usually the first googled result. But here is another easier way: Use &lt;a href=&#34;https://code.google.com/archive/p/addjars-maven-plugin/wikis/UsagePage.wiki&#34; target=&#34;_blank&#34;&gt;addjars-maven-plugin&lt;/a&gt;. Its easier, no need to run any script, no installing of jars manually, or use the dreaded system scope. Using this also means, the shaded uber jar that gets created will contain the custom jars.&lt;/p&gt;

&lt;p&gt;How to use?&lt;/p&gt;

&lt;p&gt;Add the jars to a lib folder directly inside the project directory (the project directory now contains lib, src and other usual stuff). Now add this to the pom:
&lt;pre&gt;&amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;com.googlecode.addjars-maven-plugin&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;addjars-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.0.5&amp;lt;/version&amp;gt;
            &amp;lt;executions&amp;gt;
                &amp;lt;execution&amp;gt;
                    &amp;lt;goals&amp;gt;
                        &amp;lt;goal&amp;gt;add-jars&amp;lt;/goal&amp;gt;
                    &amp;lt;/goals&amp;gt;
                    &amp;lt;configuration&amp;gt;
                        &amp;lt;resources&amp;gt;
                            &amp;lt;resource&amp;gt;
                                &amp;lt;directory&amp;gt;${project.basedir}/lib&amp;lt;/directory&amp;gt;
                            &amp;lt;/resource&amp;gt;
                        &amp;lt;/resources&amp;gt;
                    &amp;lt;/configuration&amp;gt;
                &amp;lt;/execution&amp;gt;
            &amp;lt;/executions&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;&lt;/pre&gt;
This may not be recognised by the IDE (my Intellij didn&amp;rsquo;t), but it will work via CLI. So no worries! Very useful in those rare cases, where you have a dozen of custom jars!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jackson JSON and Dynamic JSON creation</title>
      <link>https://sinujohn.github.io/2014/09/29/jackson-json-and-dynamic-json-creations/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/09/29/jackson-json-and-dynamic-json-creations/</guid>
      <description>&lt;p&gt;FasterXML Jackson is a great tool for converting objects to/from POJOs.&lt;/p&gt;

&lt;p&gt;Its a great tool when we know the structure of JSON beforehand. But what if we don&amp;rsquo;t know that? In that case we can use a Map&amp;lt;String, Object&amp;gt; to store the unknown objects. Below two links provide useful info:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/18043587/why-im-not-able-to-unwrapp-and-serialize-java-map-using-jackson-java-library&#34;&gt;http://stackoverflow.com/questions/18043587/why-im-not-able-to-unwrapp-and-serialize-java-map-using-jackson-java-library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cowtowncoder.com/blog/archives/2011/07/entry_458.html&#34;&gt;http://www.cowtowncoder.com/blog/archives/2011/07/entry_458.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating collection of Spring Beans</title>
      <link>https://sinujohn.github.io/2014/09/04/creating-collection-of-spring-beans/</link>
      <pubDate>Thu, 04 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/09/04/creating-collection-of-spring-beans/</guid>
      <description>&lt;p&gt;Some times there might arise situations where you want to create a number of Spring Beans, but you don&#39;t know how many beans are there at coding time.&lt;/p&gt;&lt;p&gt;Usually, you create a Spring bean as follows:&lt;/p&gt;
&lt;script src=&#34;//gist.github.com/sinujohn/384d51261c13e8f78b11.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;But what if you want to create 50 such beans which differ only in the argument supplied to the constructor? Or a similar case arise where the number of beans to be created cannot be determined at coding time?&lt;br /&gt; In such cases, we can create the bean definitions and add the beans to Spring container at runtime using &lt;strong&gt;BeanFactoryPostProcessor&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Implement &lt;strong&gt;BeanFactoryPostProcessor&lt;/strong&gt; in either a &lt;strong&gt;@Configuration&lt;/strong&gt; file or a &lt;strong&gt;@Component&lt;/strong&gt; bean(make sure this bean gets scanned and created).&lt;/p&gt;
&lt;script src=&#34;//gist.github.com/sinujohn/ca787f0e6730eb9890d5.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;If there are more than one constructor arguments, the call can be chained as follows:&lt;/p&gt;
&lt;script src=&#34;//gist.github.com/sinujohn/96f6480a4120989dfa7f.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;All this works fine when you have to create a bean using constructor. But :( I haven&#39;t figured out how to do this when we use a chain of factory methods to create a bean as follows:&lt;/p&gt;
&lt;script src=&#34;//gist.github.com/sinujohn/512ca43414bcfc9d6609.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;Happy Coding! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JAX-RS</title>
      <link>https://sinujohn.github.io/2014/08/27/jax-rs/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/08/27/jax-rs/</guid>
      <description>&lt;p&gt;There is a very good documentation in Jersey website: &lt;a href=&#34;https://jersey.java.net/documentation/latest/jaxrs-resources.html&#34;&gt;https://jersey.java.net/documentation/latest/jaxrs-resources.html&lt;/a&gt; and &lt;a href=&#34;https://jersey.java.net/documentation/latest/filters-and-interceptors.html&#34;&gt;https://jersey.java.net/documentation/latest/filters-and-interceptors.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Here is a small flowchart that I made showing how the JAX-RS flow works:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://sinujohn.github.io/assets/jaxrs.png&#34; alt=&#34;jaxrs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Happy coding :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spring AOP</title>
      <link>https://sinujohn.github.io/2014/07/03/spring-aop/</link>
      <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/07/03/spring-aop/</guid>
      <description>&lt;p&gt;I was doing some Spring AOP stuff the other day using @AspectJ style annotations. One of the limitations of Spring AOP is that it supports only method level interception. We cannot intercept Constructors or fields. For that we&#39;ll have to use AspectJ, and different compilers may be - for load time weaving or compile time weaving. I decided to stick to Spring restrictions though.&lt;/p&gt;&lt;p&gt;Here are a couple of cheatsheets/examples for AspectJ. (Remember Spring AOP has limitations, but AspectJ doesn&#39;t).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;An excellent &lt;a style=&#34;font-style:normal;&#34; href=&#34;http://blog.espenberntsen.net/2010/03/20/aspectj-cheat-sheet/&#34;&gt;cheat sheet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;A &lt;a style=&#34;font-style:normal;&#34; href=&#34;http://blog.espenberntsen.net/2010/03/18/aspectj-examples-with-pointcuts-based-on-annotations/&#34;&gt;good example&lt;/a&gt; by the same guy&lt;/li&gt;&lt;li&gt;An &lt;a style=&#34;font-style:normal;&#34; href=&#34;http://stackoverflow.com/a/2522821/952511&#34;&gt;SO answer&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To start off a project just start a new Spring Boot project from STS with Spring AOP ticked. Thats it. Spring Boot handles all the dependencies bootifully. It adds some unnecessary dependencies also. So if you just need AOP, just add AOP dependencies instead of Spring Boot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tryst with Java 8!</title>
      <link>https://sinujohn.github.io/2014/06/03/tryst-with-java-8/</link>
      <pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/06/03/tryst-with-java-8/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Java 8&lt;/strong&gt; - it has been making headlines as the version which brings dramatic changes to Java. And I believe its true. I have been using Java 8 for the last few months and using Java 8 features has really brought changes in the way I write code and sometimes even the way I think about code!&lt;/p&gt;

&lt;p&gt;Most of the changes is in the way we deal with Collections. And most of our daily life as a programmer revolves around manipulating or using Java Collections. Java 8 has brought in functional programming and Lambda expressions. There are many examples out there in the WWW which go to the intricacies of Lambda expressions and Java 8 features. Here I&amp;rsquo;ll jot down some notes which I found to be useful. Its no way an introduction or tutorial, its just some notes I have made which&amp;rsquo;ll help in understanding Java 8 features.
&lt;h3&gt;Functional Interfaces&lt;/h3&gt;
Any interface with just one non-default method.
-Even though not necessary, we can enforce this constraint by annotating an interface with &lt;em&gt;&lt;strong&gt;@FunctionalInterface&lt;/strong&gt;&lt;/em&gt;
&lt;h3&gt;Default Methods&lt;/h3&gt;
An interface method with modifier &amp;lsquo;&lt;em&gt;&lt;strong&gt;default&lt;/strong&gt;&lt;/em&gt;&amp;rsquo;. Should have method implementation.
&lt;h3&gt;Lambdas&lt;/h3&gt;
Short-cut way to implement &lt;em&gt;anonymous inner classes&lt;/em&gt; for &lt;span style=&#34;text-decoration:underline;&#34;&gt;&lt;strong&gt;functional interfaces&lt;/strong&gt;&lt;/span&gt;.
&lt;strong&gt;Syntax:&lt;/strong&gt;
parameter || (parameters) || () -&amp;gt; expression || statement || { statements }
&lt;ul&gt;
    &lt;li&gt;Can reference external variables which are effectively final in the lambda body&lt;/li&gt;
    &lt;li&gt;&amp;lsquo;parameters&amp;rsquo; - parameters for the functional interface method. Datatype is not required. Eg: (String s1, int i), (s1, i)&lt;/li&gt;
    &lt;li&gt;a single &amp;lsquo;expression&amp;rsquo; can be used if the lambda body is just a return statement&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Method Reference&lt;/h3&gt;
&lt;strong&gt;Syntax:&lt;/strong&gt;
ClassName::methodName
&lt;strong&gt;To refer constructors:&lt;/strong&gt; ClassName::new
&lt;ul&gt;
    &lt;li&gt;Can be used anywhere where a lambda or functional interface implementation is expected.&lt;/li&gt;
    &lt;li&gt;The referred method should be having same signature as of the functional interface method&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Functions like foreach(), stream(), filter(), map(), findFirst() along with Consumer, Function and Predicate make life a hell lot of easy in dealing with Java Collections. Java 8 also brings functional programming to Java world with its lambdas. That means we can now pass a function to a function and return a function from a function! That brings a lot of changes in which we write Java programs. Java 8 also brings a new Date/Time API as well as some utils like Base64 encoding in the default library set.&lt;/p&gt;

&lt;p&gt;Happy coding :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Maven Spring-REST project</title>
      <link>https://sinujohn.github.io/2014/02/19/creating-a-maven-spring-rest-project/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/02/19/creating-a-maven-spring-rest-project/</guid>
      <description>&lt;p&gt;Open Eclipse. Make sure it is a recent version with m2e integration. I am using Kepler version of Eclipse.
Now go to File &amp;gt; New &amp;gt; Maven Project.
&lt;img src=&#34;https://sinujohn.github.io/assets/rest1.png&#34; alt=&#34;screenshot1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click Next. Select maven-archetype-webapp.
&lt;img src=&#34;https://sinujohn.github.io/assets/rest2.png&#34; alt=&#34;screenshot2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click Next. Enter GroupID (group ID is the name that refers to a group of projects. It should be unique. A name like &amp;lsquo;com.companyname.yourname&amp;rsquo; would be suffice) and Artifact ID (Artifact ID is the project name. It should be unique within a groupID).&lt;/p&gt;

&lt;p&gt;There can be several projects under the same GroupID, but ArtifactID should be different for each project. I have given GroupID as &lt;em&gt;&amp;lsquo;me.sinu.jugaad&amp;rsquo;&lt;/em&gt; and ArtifactID as &lt;em&gt;&amp;lsquo;rest&amp;rsquo;&lt;/em&gt;.
&lt;img src=&#34;https://sinujohn.github.io/assets/rest3.png&#34; alt=&#34;screenshot3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click Finish to create the project.&lt;/p&gt;

&lt;p&gt;The webapp archetype would have created the necessary folder structure and a web.xml for you. This web.xml might be for older Servlets without support for Servlet v.3, it doesn&amp;rsquo;t matter as we&amp;rsquo;ll overwrite it later.
You might examine pom.xml now, it may contain a single dependency of jUnit(even if you won&amp;rsquo;t find it its fine :) )&lt;/p&gt;

&lt;p&gt;Now lets examine the dependencies we might require for our simple project:
&lt;ul&gt;
    &lt;li&gt;We are building REST services, so we need REST api (&lt;strong&gt;javax.ws.rs-api&lt;/strong&gt;) and an implentation for it. We&amp;rsquo;ll use Apache CXF implementation (&lt;strong&gt;cxf-bundle-jaxrs&lt;/strong&gt;).&lt;/li&gt;
    &lt;li&gt;We&amp;rsquo;ll use Spring to wire the beans and for dependency injection. So we need a bunch of Spring libraries (&lt;strong&gt;spring-web&lt;/strong&gt; and &lt;strong&gt;spring-context&lt;/strong&gt; should be enough for our skeleton project. &lt;em&gt;&lt;strong&gt;spring-context&lt;/strong&gt;&lt;/em&gt; is needed for &lt;em&gt;ContextLoaderListener&lt;/em&gt; which loads the beans by scanning some Spring context xml configuration files)&lt;/li&gt;
    &lt;li&gt;We&amp;rsquo;ll use a JSON provider which helps in converting object to/from JSON. It is not needed for this skeleton project, but its usually handy in almost all REST projects. So we&amp;rsquo;ll add one such provider (&lt;strong&gt;jackson-jaxrs-json-provider&lt;/strong&gt;) just in case we need it in future.&lt;/li&gt;
&lt;/ul&gt;
Here is the &lt;strong&gt;pom.xml&lt;/strong&gt;:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/sinujohn/c2839b0528fdbc8115b0.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now create a java folder under &lt;strong&gt;src/main&lt;/strong&gt;. Create a package (&lt;strong&gt;me.sinu.jugaad.rest&lt;/strong&gt;) and a class file inside it(&lt;strong&gt;HelloWorld.java&lt;/strong&gt;).
We&amp;rsquo;ll just tell a simple &amp;ldquo;&lt;strong&gt;Hello REST!&lt;/strong&gt;&amp;rdquo; from our REST service. Here is the class:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/sinujohn/f4cc9425e52b407da5c4.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now we&amp;rsquo;ll create a Spring configuration file under &lt;strong&gt;WEB-INF&lt;/strong&gt; folder, say &lt;strong&gt;rest-context.xml&lt;/strong&gt;:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/sinujohn/60f8b04e584b5a0e5b0f.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;In this we just defined our &lt;strong&gt;helloWorld&lt;/strong&gt; bean and hooked it up with our JAXRS servlet. We also provided our JSON provider to it to automatically do any marshalling/unmarshalling. You may provide your own providers, which will be necessary as the app grows. Providers can contain Filters or other interceptors.&lt;/p&gt;

&lt;p&gt;Now lets define our webapp&amp;rsquo;s &lt;strong&gt;web.xml&lt;/strong&gt;:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/sinujohn/982335d88382c37f60b4.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;We specify &amp;lsquo;&lt;strong&gt;contextConfigLocation&lt;/strong&gt;&amp;rsquo; for the Spring&amp;rsquo;s &amp;lsquo;&lt;strong&gt;ContextLoaderListener&lt;/strong&gt;&amp;rsquo; to pick it up as the webapp is loaded. The &lt;em&gt;contextConfigLocation&lt;/em&gt; can be given as exact file names or using wild cards.
Since we are using CXF implementation, a CXF servlet is used. The address for our &lt;strong&gt;servlet&lt;/strong&gt; is &amp;ldquo;&lt;strong&gt;/services&lt;/strong&gt;&amp;rdquo; and that for our &amp;lsquo;&lt;strong&gt;helloREST&lt;/strong&gt;&amp;rsquo; JAX RS server is &amp;ldquo;&lt;strong&gt;/greet&lt;/strong&gt;&amp;rdquo;.
So &amp;ldquo;&lt;strong&gt;WAR_FILE/services/greet&lt;/strong&gt;&amp;rdquo; will take us to the JAXRS server. Our simple GET function is annotated with &lt;strong&gt;@Path(&amp;ldquo;/hello&amp;rdquo;)&lt;/strong&gt;, so to access this we should give as follows: &amp;ldquo;&lt;strong&gt;WAR_FILE/services/greet/hello&lt;/strong&gt;&amp;rdquo;.
Now run the project - &lt;em&gt;right-click the project &amp;gt; Run As &amp;gt; Run on server&lt;/em&gt;. You might choose a server like Tomcat server v.7. Now in a browser go to &amp;ldquo;&lt;strong&gt;&lt;a href=&#34;http://localhost:8080/rest/services/greet/hello&#34;&gt;http://localhost:8080/rest/services/greet/hello&lt;/a&gt;&lt;/strong&gt;&amp;rdquo; (here &amp;lsquo;&lt;em&gt;rest&lt;/em&gt;&amp;rsquo; is the WAR file name).&lt;/p&gt;

&lt;p&gt;If you see &amp;ldquo;&lt;strong&gt;Hello REST!&lt;/strong&gt;&amp;rdquo; everything is fine, else, Dr.Watson, we have a problem ;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Maven config for SLF4J and Logback</title>
      <link>https://sinujohn.github.io/2014/02/04/maven-config-for-slf4j-and-logback/</link>
      <pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/02/04/maven-config-for-slf4j-and-logback/</guid>
      <description>&lt;p&gt;To use SLF4J and logback together, add the following to pom.xml:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;1.7.5&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
 &amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;1.0.13&amp;lt;/version&amp;gt;
 &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
 &amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
 &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
 &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;font-family:Georgia, &#39;Times New Roman&#39;, &#39;Bitstream Charter&#39;, Times, serif;font-size:14px;line-height:1.5em;&#34;&gt;Now SLF4J&amp;rsquo;s logger can be used:&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
....
private final Logger logger =  LoggerFactory.getLogger(MyClass.class);
...
logger.debug(&amp;quot;Mandatory fields are missing&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If while running this in Eclipse or in console, it complains of some missing configuration, add thisto pom.xml:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;build&amp;gt;
        &amp;lt;pluginManagement&amp;gt;
            &amp;lt;plugins&amp;gt;
                &amp;lt;plugin&amp;gt;
                    &amp;lt;groupId&amp;gt;org.eclipse.m2e&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;lifecycle-mapping&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
                    &amp;lt;configuration&amp;gt;
                        &amp;lt;lifecycleMappingMetadata&amp;gt;
                            &amp;lt;pluginExecutions&amp;gt;
                                &amp;lt;pluginExecution&amp;gt;
                                    &amp;lt;pluginExecutionFilter&amp;gt;
                                        &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
                                        &amp;lt;artifactId&amp;gt;properties-maven-plugin&amp;lt;/artifactId&amp;gt;
                                        &amp;lt;versionRange&amp;gt;[1.0-alpha-2,)&amp;lt;/versionRange&amp;gt;
                                        &amp;lt;goals&amp;gt;
                                            &amp;lt;goal&amp;gt;set-system-properties&amp;lt;/goal&amp;gt;
                                        &amp;lt;/goals&amp;gt;
                                    &amp;lt;/pluginExecutionFilter&amp;gt;
                                    &amp;lt;action&amp;gt;
                                        &amp;lt;ignore /&amp;gt;
                                    &amp;lt;/action&amp;gt;
                                &amp;lt;/pluginExecution&amp;gt;
                            &amp;lt;/pluginExecutions&amp;gt;
                        &amp;lt;/lifecycleMappingMetadata&amp;gt;
                    &amp;lt;/configuration&amp;gt;
                &amp;lt;/plugin&amp;gt;
            &amp;lt;/plugins&amp;gt;
        &amp;lt;/pluginManagement&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;properties-maven-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;1.0-alpha-2&amp;lt;/version&amp;gt;
                &amp;lt;executions&amp;gt;
                    &amp;lt;execution&amp;gt;
                        &amp;lt;goals&amp;gt;
                            &amp;lt;goal&amp;gt;set-system-properties&amp;lt;/goal&amp;gt;
                        &amp;lt;/goals&amp;gt;
                        &amp;lt;configuration&amp;gt;
                            &amp;lt;properties&amp;gt;
                                &amp;lt;property&amp;gt;
                                    &amp;lt;name&amp;gt;logback.configurationFile&amp;lt;/name&amp;gt;
                                    &amp;lt;value&amp;gt;src/main/resources/logback.xml&amp;lt;/value&amp;gt;
                                &amp;lt;/property&amp;gt;
                            &amp;lt;/properties&amp;gt;
                        &amp;lt;/configuration&amp;gt;
                    &amp;lt;/execution&amp;gt;
                &amp;lt;/executions&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here &amp;ldquo;src/main/resources/logback.xml&amp;rdquo; has the logback configuration. Even if it is not present output may be sent to console&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JPA - Part 3</title>
      <link>https://sinujohn.github.io/2013/09/05/jpa-part-3/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/09/05/jpa-part-3/</guid>
      <description>&lt;p&gt;Go to &lt;a href=&#34;https://sinujohn.github.io/2013/08/31/jpa-part-1/&#34;&gt;Part 1&lt;/a&gt;.
&lt;h2&gt;Callback Methods&lt;/h2&gt;
&lt;div&gt;When insert, update and delete occurs, we can listen to those events and call some methods when such events occur. Callback methods should be prefixed by following annotations:&lt;/div&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;@PrePersist&lt;/strong&gt; - called before persist()&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;@PostPersist&lt;/strong&gt; - called after persist()&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;@PreRemove&lt;/strong&gt; - called before remove()&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;@PostRemove&lt;/strong&gt; - called after commit()&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;@PreUpdate&lt;/strong&gt; - called before commit()&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;@PostUpdate&lt;/strong&gt; - called after commit()&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt; More than one annotation can applied to a single method. There should be only one method with a particular callback annotation(example, there shouldn&amp;rsquo;t be more than one @Prepersist methods). The callback methods shouldn&amp;rsquo;t take any arguments.&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;h2&gt;Entity Listeners&lt;/h2&gt;
&lt;div&gt;Mixing callback methods into Entity class is not a good practice. So we write it in another class which is an Entity Listener.&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;h3&gt;Annotations Used:&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;@EntityListeners(EntityListener_ClassName.class)
&lt;ul&gt;
    &lt;li&gt;Used before the Entity class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- Entity Listener should have public default constructor
- An Entity class can have some callback methods defined in it and some in an Entity Listener
- An Entity Listener class can listen to more than one Entity classes.
- The callback methods defined in Entity Listener class must take an object of Entity class as argument
&lt;div&gt;&lt;/div&gt;
&lt;h3&gt;Example:&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
@EntityListeners(EmployeeListener.class)
public class Employee {
    .....
}

public class EmployeeListener {
    @PrePersist
    public void beforePersist(Employee e) {
        System.out.println(&amp;amp;quot;Before persist&amp;amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h2&gt;Merge Method&lt;/h2&gt;
&lt;div&gt;- Used to synchronise the changes between objects and database tables.&lt;/div&gt;
&lt;div&gt;- Adds a new row if the entity is not present in db table.&lt;/div&gt;
&lt;div&gt;- Updates the existing row if it is present in table.&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;h3&gt;Example:&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;et.begin();
    ....
    ....
    em.merge(empObject); //merges the changes in empObject with table
et.commit();
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JPA - Part 2</title>
      <link>https://sinujohn.github.io/2013/09/01/jpa-part-2/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/09/01/jpa-part-2/</guid>
      <description>&lt;p&gt;This is continued from &lt;a href=&#34;https://sinujohn.github.io/2013/08/31/jpa-part-1/&#34;&gt;JPA: part 1&lt;/a&gt;.
&lt;h2&gt;Other Annotations:&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;@Table(name = &amp;ldquo;TABLENAME&amp;rdquo;)&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;Used before class name to explicitly specify table name.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;@Column(name = &amp;ldquo;COLUMN_NAME&amp;rdquo;)&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;Used before instance variables to explicitly set column names.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example:&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Entity
@Table(name = &amp;quot;EMP&amp;quot;)
public class Employee {
    @Id
    @Column(name = &amp;quot;EMP_ID&amp;quot;)
    private int id;

    @Column(name = &amp;quot;EMP_NAME&amp;quot;)
    private String name;

    //getters and setters
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this maps to
Table: &lt;strong&gt;EMP&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; --------------------------
 | EMP_ID (PK) | EMP_NAME |
 --------------------------
 |_____________|__________|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JPA automatically maps &amp;lsquo;int&amp;rsquo; to &amp;lsquo;NUMBER&amp;rsquo; and &amp;lsquo;String&amp;rsquo; to &amp;lsquo;CHAR&amp;rsquo; or &amp;lsquo;VARCHAR&amp;rsquo;. But it cannot automatically convert Date or Time datatypes. So we need to specify the Temporal type to be used. (Temporal = related to time)
&lt;h2&gt;Other Annotations:&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;@Temporal(TemporalType.TYPE)&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;TYPE can be DATE, TIME or TIMESTAMP. Used before &amp;lsquo;Date&amp;rsquo; or &amp;lsquo;Calendar&amp;rsquo; datatypes. Oracle only has DATE datatype. It doesn&amp;rsquo;t have TIME or TIMESTAMP.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;@Transient&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;Used before those instance variables that need not be persisted.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example:&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
public class Student {
    @Id
    private int regNo;
    private String name;

    @Temporal(TemporalType.DATE)
    private Calendar dob; //&#39;dob&#39; column od database is of &#39;DATE&#39; datatype

    private int mark1;
    private int mark2;
    private int mark3;

    @Transient
    private float averageMark; //Not stored in database

    //getters and setters
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h2&gt;&lt;/h2&gt;
&lt;h2&gt;Configuring JPA&lt;/h2&gt;
Configure &amp;lsquo;persistence unit&amp;rsquo; in &amp;lsquo;&lt;strong&gt;persistence.xml&lt;/strong&gt;&amp;lsquo;:
Persistence unit name is specified as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;persistence-unit name=&amp;quot;EmployeeService&amp;quot; transaction-type=&amp;quot;RESOURCE_LOCAL&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here &lt;em&gt;EmployeeService&lt;/em&gt; is the persistence unit.&lt;/p&gt;

&lt;p&gt;We should then specify all Entity classes that need to be persisted in &lt;code&gt;&amp;lt;class&amp;gt;&lt;/code&gt; tags&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class&amp;gt;me.sinu.entity.Entity1&amp;lt;/class&amp;gt;
&amp;lt;class&amp;gt;me.sinu.entity.Entity2&amp;lt;/class&amp;gt;
&amp;lt;class&amp;gt;me.sinu.entity.Entity3&amp;lt;/class&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then configure the db related stuff like URL,username,password etc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;properties&amp;gt;
    &amp;lt;property name=&amp;quot;toplink.jdbc.url&amp;quot; value=&amp;quot;jdbc:oracle:thin:@127.0.0.1:1521/db&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;toplink.jdbc.user&amp;quot; value=&amp;quot;username&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;toplink.jdbc.password&amp;quot; value=&amp;quot;password&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;toplink.jdbc.driver&amp;quot; value=&amp;quot;oracle.jdbc.driver.OracleDriver&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;toplink.ddl-generation&amp;quot; value=&amp;quot;create-tables&amp;quot;/&amp;gt;
&amp;lt;/properties&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is for TopLink implementation of JPA to connect to Oracle. It might be different for other implementations.
&lt;h2&gt;Persisting an Entity using JPA&lt;/h2&gt;
&lt;ol&gt;
    &lt;li&gt;Creating an instance of &amp;lsquo;&lt;strong&gt;EntityManagerFactory&lt;/strong&gt;&amp;lsquo;
&lt;ul&gt;
    &lt;li&gt;Persistence.createEntityManagerFactory(persistence-unit_name_defined_in_xml_file)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
    &lt;li&gt;Obtaining an instanceof &amp;lsquo;&lt;strong&gt;EntityManager&lt;/strong&gt;&amp;lsquo;&lt;/li&gt;
    &lt;li&gt;Persist the Entity
&lt;ul&gt;
    &lt;li&gt;Begin EntityTransaction&lt;/li&gt;
    &lt;li&gt;Invoke &lt;strong&gt;persist()&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;Commit the transaction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Example:&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EntityManagerFactory emf = Persistence.createEntityManagerFactory(&amp;quot;EmployeeService&amp;quot;);
EntityManager em = emf.createEntityManager();
EntityTransaction et = em.getTransaction();
if(et==null) {
    //ERROR. Cannot obtain transaction
    return;
}
et.begin(); //begin transaction
    Employee emp = new Employee();
    emp.setEmpId(101);
    emp.setName(&amp;quot;sinu&amp;quot;);
    em.persist(emp); //persist the data
et.commit(); //ending transaction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we call em.persist(), data is sent to the database and it is stored in DB Buffer. It is not yet updated in the table. When we call em.commit(), the data gets updated in the table.
&lt;h2&gt;Finding an Entity&lt;/h2&gt;
To find an entity, we need not begin a transaction. We can find it using EntityManager.
Syntax:
&lt;strong&gt;EntityManager.find(EntityClassName.class, PrimaryKey)&lt;/strong&gt;
&lt;h3&gt;Example:&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Employee empl = em.find(Employee.class, 101);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here 101 is the empId(primary key) to be searched.&lt;/p&gt;

&lt;p&gt;If table doesn&amp;rsquo;t exist or record is not present, it returns null.
&lt;h2&gt;Updating an Entity&lt;/h2&gt;
Once we find an entity, the entity object in the heap memory gets a connection to the table. So,if we modify the object, the table also gets updated.
An object which is connected to a table(relation) is called &amp;lsquo;&lt;strong&gt;Managed Object&lt;/strong&gt;&amp;rsquo;. If we update the Managed Object, the table also gets updated.
&lt;h3&gt;Example:&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EntityTransaction et = em.getTransaction();
et.begin();
    Employee empl = em.find(Employee.class, 101);
    //empl is now a Managed Object. We can now modify it
    if(empl!=null) {
        empl.setSalary(empl.getSalary()+1000);
    }
et.commit();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h2&gt;Removing an Entity&lt;/h2&gt;
This is similar to update. Once we find the object we call &lt;strong&gt;EntityManager.remove(entityObject)&lt;/strong&gt;
&lt;h3&gt;Example:&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;EntityTransaction et = em.getTransaction();
et.begin();
    Employee empl = em.find(Employee.class, 101);
    //empl is now a Managed Object. We can now modify it
    if(empl!=null) {
        em.remove(empl)
    }
et.commit();
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JPA - Part 1</title>
      <link>https://sinujohn.github.io/2013/08/31/jpa-part-1/</link>
      <pubDate>Sat, 31 Aug 2013 00:10:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/08/31/jpa-part-1/</guid>
      <description>&lt;p&gt;This post is part of &lt;a href=&#34;https://sinujohn.github.io/2013/08/31/persistence-using-java/&#34;&gt;Project Digitisation&lt;/a&gt;. I have decided to write about JPA in several posts. This is part 1 of the series.
&lt;h2&gt;JPA - Java Persistence API&lt;/h2&gt;
JPA is a specification. There are several implementations like Hibernate, TopLink etc. Persisting objects in DB is an integral part of Enterprise applications.
JPA provides:
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;ORM&lt;/strong&gt; (Object Relation Mapping) i.e. it maps an Object to a Relation(Table).
&lt;ul&gt;
    &lt;li&gt;An Object which can be mapped is called an Entity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;JPQL&lt;/strong&gt; - Java Persistence Query Language&lt;/li&gt;
&lt;/ul&gt;
Entity classes should be Java beans (POJOs with private variables and public getters and setters).
&lt;h3&gt;Annotations used:&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;@Entity&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;Used before a class name. By default, table name is same as class name.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;@Id&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;Used before the instance variable which is the primary key in the table.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
By default instance variable names is same as the column names.
&lt;h4&gt;Example:&lt;/h4&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
public class Employee {
    @Id
    private int empId; //becomes primary key
    private String name;

    //getters and setters
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this maps to
&lt;strong&gt;Table: &lt;/strong&gt;Employee&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; | empId | name |
 | ----- | ---- |
 | _____ | ____ |
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Persistence Using Java</title>
      <link>https://sinujohn.github.io/2013/08/31/persistence-using-java/</link>
      <pubDate>Sat, 31 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/08/31/persistence-using-java/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Project Digitisation:&lt;/strong&gt; I have decided to convert the notes that I have written into blogs :) This post and some posts that follow(about JPA) is part of that project.&lt;/p&gt;

&lt;p&gt;There are several frameworks that are used for persisting objects in databases like JPA, Hibernate etc. (JPA is actually a specification. Hibernate is an implementation of JPA. Hibernate also has several extra features which are not specified by JPA).&lt;/p&gt;

&lt;p&gt;This blog post mentions JDBC. I will not go into the details of how to use JDBC as using JPA is the focus. Details about how to persist objects in Java using JPA is discussed in next blog post.
&lt;h2&gt;JDBC&lt;/h2&gt;
&lt;strong&gt;JDBC - Java DataBase Connectivity&lt;/strong&gt;
JDBC works in the backstage of all the frameworks. Frameworks makes our life easy in persisting objects and modifying them.
JDBC is a specification - it tells the DB vendor how to provide driver for Java and it tells the programmer how to write Java programs that can connect to the db. It is in &amp;ldquo;java.sql&amp;rdquo; package.
JDBC drivers:
&lt;ol&gt;
    &lt;li&gt;Type 1 (JDBC - ODBC Bridge) - obsolete&lt;/li&gt;
    &lt;li&gt;Type 2 (Native API Driver) - obsolete&lt;/li&gt;
    &lt;li&gt;Type 3 (Network Protocol Driver)&lt;/li&gt;
    &lt;li&gt;Type 4 (Native Protocol Driver)&lt;/li&gt;
&lt;/ol&gt;
Type 4 is NOT an improvement over Type3.
Type 3 communicates with Application Servers. So even if we change databases, the programs need not be changed. The application server automatically selects the suitable driver.
Type 4 is specific to each DB vendor. If we change the vendor then we need new driver. It is platform independent.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Implementing a Search Engine</title>
      <link>https://sinujohn.github.io/2013/07/16/implementing-a-search-engine/</link>
      <pubDate>Tue, 16 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/07/16/implementing-a-search-engine/</guid>
      <description>&lt;p&gt;The WordCount is a trivial problem. What is the next best problem to tackle in Map Reduce? Something in which I can create my own Readers,Writables etc?&lt;/p&gt;

&lt;p&gt;I kept wondering about this for some time. And then decided on what about a Search Engine? After all, the concepts of BigData originated at the house of the Search giant Google (from the papers they published about Map Reduce, BigTable etc.)&lt;/p&gt;

&lt;p&gt;The first step was to implement an Inverted Index. To lookup the index faster, I decided to use the BigTable implementation for hadoop called HBase. So the Inverted Index creator reads the files on the disk and creates an InvertedIndex as an HBase table. (there is a small bug with respect to inserting data to HBase table, but I have written the InvertedIndex data to a file and that works. Should check it sometime later)&lt;/p&gt;

&lt;p&gt;So now the InvertedIndex is ready, the next step is to look it up. Haven&amp;rsquo;t done that yet! Find the code in &lt;a href=&#34;https://github.com/sinujohn/SearchEn/&#34;&gt;my Git Repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A good read on &lt;a href=&#34;http://www.ardendertat.com/2011/05/30/how-to-implement-a-search-engine-part-1-create-index/&#34;&gt;how to create Search Engine&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Map Reduce</title>
      <link>https://sinujohn.github.io/2013/07/16/map-reduce/</link>
      <pubDate>Tue, 16 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/07/16/map-reduce/</guid>
      <description>&lt;p&gt;Everyone is saying that the world is going the cloud way. Big Data, Analytics etc are today&amp;rsquo;s buzzwords. I used to wonder what is so special about the cloud? I read a bit about Hadoop, HBase (the NoSQL DB for Hadoop) etc and came to know about the Map Reduce Framework.&lt;/p&gt;

&lt;p&gt;Map Reduce is a framework which helps us to write program for the cloud. It is a simple framework. The MapReduce version of the Hello World program for Hadoop is the WordCount program.&lt;/p&gt;

&lt;p&gt;I decided to start experimenting with this framework and have written a couple of programs.
Find it here in &lt;a href=&#34;https://github.com/sinujohn/MapReduce/&#34;&gt;my git repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How Map and Reduce operations are actually carried out:
&lt;a href=&#34;http://wiki.apache.org/hadoop/HadoopMapReduce&#34;&gt;http://wiki.apache.org/hadoop/HadoopMapReduce&lt;/a&gt;
&lt;a href=&#34;http://wiki.apache.org/hadoop/MapReduce&#34;&gt;http://wiki.apache.org/hadoop/MapReduce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some Usecases of MapReduce: &lt;a href=&#34;http://highlyscalable.wordpress.com/2012/02/01/mapreduce-patterns/&#34;&gt;http://highlyscalable.wordpress.com/2012/02/01/mapreduce-patterns/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Observer Pattern</title>
      <link>https://sinujohn.github.io/2013/07/09/observer-pattern/</link>
      <pubDate>Tue, 09 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/07/09/observer-pattern/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Software_design_pattern&#34;&gt;Classification&lt;/a&gt;: Behavioral patterns
Description : Define a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically.&lt;/p&gt;

&lt;p&gt;This pattern is sometimes referred to as Listeners in some frameworks.&lt;/p&gt;

&lt;p&gt;Read about the pattern &lt;a href=&#34;http://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;here&lt;/a&gt;.
The code sample can be found in my &lt;a href=&#34;https://github.com/sinujohn/DesignPatterns/tree/master/src/me/sinu/pattern/observer&#34;&gt;git repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the example code I have done, there is a city, as with all cities many things can go wrong in a city. So city is the subject or the observable. To handle the emergency situations we have many emergency handlers. These handlers observe the city and take actions when needed. So handlers are Observers.
When something happens in the city, all observers will be notified. Some observers respond to the situation and some do not.&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>