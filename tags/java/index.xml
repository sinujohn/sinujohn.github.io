<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Sinu John</title>
    <link>https://sinujohn.github.io/tags/java/</link>
    <description>Recent content in java on Sinu John</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-SA 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 26 Apr 2020 21:22:16 +0530</lastBuildDate>
    
	<atom:link href="https://sinujohn.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Cloud Stream - using Functional constructs</title>
      <link>https://sinujohn.github.io/2020/04/26/spring-cloud-stream-using-functional-constructs/</link>
      <pubDate>Sun, 26 Apr 2020 21:22:16 +0530</pubDate>
      
      <guid>https://sinujohn.github.io/2020/04/26/spring-cloud-stream-using-functional-constructs/</guid>
      <description>Preface Spring Cloud Stream provides a framework to implement messaging in a clean way. The new version 3 brings functional paradigm to the Spring Cloud Stream framework where previously the annotations were used for the same. Docs explain it way better, but I will provide a succint way to get started. Read this after going through the docs. In this blog, I chose Kafka as the message broker.
Getting Started Add Dependencies  Cloud Stream Kafka  Adding Cloud Stream, lets us create Beans of type Function, Consumer or Supplier.</description>
    </item>
    
    <item>
      <title>Unit test - Sending emails via SMTP</title>
      <link>https://sinujohn.github.io/2017/03/27/unit-test-sending-emails-via-smtp/</link>
      <pubDate>Mon, 27 Mar 2017 15:54:02 +0530</pubDate>
      
      <guid>https://sinujohn.github.io/2017/03/27/unit-test-sending-emails-via-smtp/</guid>
      <description>I had been looking for ways on how to unit test sending out emails via SMTP server. As with all other problems, there are a bunch of options for this. But most of them are not embeddable which means I have to start them and stop them outside my code. I was looking for something very simple. Something thats embeddable and provides just the bare minimum functionality that I need like asserting whether mails have been send (without actually sending them ofcourse!</description>
    </item>
    
    <item>
      <title>Java - Add lib folder to classpath</title>
      <link>https://sinujohn.github.io/2016/06/01/java-add-lib-folder-to-classpath/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2016/06/01/java-add-lib-folder-to-classpath/</guid>
      <description>Adding non standard, non-maven, custom jars in a maven project is a common issue. And this SO post is usually the first googled result. But here is another easier way: Use addjars-maven-plugin. Its easier, no need to run any script, no installing of jars manually, or use the dreaded system scope. Using this also means, the shaded uber jar that gets created will contain the custom jars.
How to use?</description>
    </item>
    
    <item>
      <title>Jackson JSON and Dynamic JSON creation</title>
      <link>https://sinujohn.github.io/2014/09/29/jackson-json-and-dynamic-json-creations/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/09/29/jackson-json-and-dynamic-json-creations/</guid>
      <description>FasterXML Jackson is a great tool for converting objects to/from POJOs.
Its a great tool when we know the structure of JSON beforehand. But what if we don&amp;rsquo;t know that? In that case we can use a Map&amp;lt;String, Object&amp;gt; to store the unknown objects. Below two links provide useful info:
http://stackoverflow.com/questions/18043587/why-im-not-able-to-unwrapp-and-serialize-java-map-using-jackson-java-libraryhttp://www.cowtowncoder.com/blog/archives/2011/07/entry_458.htmlHappy Coding :)</description>
    </item>
    
    <item>
      <title>Creating collection of Spring Beans</title>
      <link>https://sinujohn.github.io/2014/09/04/creating-collection-of-spring-beans/</link>
      <pubDate>Thu, 04 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/09/04/creating-collection-of-spring-beans/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JAX-RS</title>
      <link>https://sinujohn.github.io/2014/08/27/jax-rs/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/08/27/jax-rs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spring AOP</title>
      <link>https://sinujohn.github.io/2014/07/03/spring-aop/</link>
      <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/07/03/spring-aop/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tryst with Java 8!</title>
      <link>https://sinujohn.github.io/2014/06/03/tryst-with-java-8/</link>
      <pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/06/03/tryst-with-java-8/</guid>
      <description>Java 8- it has been making headlines as the version which brings dramatic changes to Java. And I believe its true. I have been using Java 8 for the last few months and using Java 8 features has really brought changes in the way I write code and sometimes even the way I think about code!
Most of the changes is in the way we deal with Collections. And most of our daily life as a programmer revolves around manipulating or using Java Collections.</description>
    </item>
    
    <item>
      <title>Creating a Maven Spring-REST project</title>
      <link>https://sinujohn.github.io/2014/02/19/creating-a-maven-spring-rest-project/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/02/19/creating-a-maven-spring-rest-project/</guid>
      <description>Open Eclipse. Make sure it is a recent version with m2e integration. I am using Kepler version of Eclipse. Now go to File &amp;gt; New &amp;gt; Maven Project. Click Next. Select maven-archetype-webapp. Click Next. Enter GroupID (group ID is the name that refers to a group of projects. It should be unique. A name like &amp;lsquo;com.companyname.yourname&amp;rsquo; would be suffice) and Artifact ID (Artifact ID is the project name. It should be unique within a groupID).</description>
    </item>
    
    <item>
      <title>Maven config for SLF4J and Logback</title>
      <link>https://sinujohn.github.io/2014/02/04/maven-config-for-slf4j-and-logback/</link>
      <pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/02/04/maven-config-for-slf4j-and-logback/</guid>
      <description>To use SLF4J and logback together, add the following to pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.5&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.13&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; Now SLF4J&amp;rsquo;s logger can be used:import org.slf4j.Logger; import org.slf4j.LoggerFactory; .... private final Logger logger = LoggerFactory.getLogger(MyClass.class); ... logger.debug(&amp;quot;Mandatory fields are missing&amp;quot;); If while running this in Eclipse or in console, it complains of some missing configuration, add thisto pom.xml:
&amp;lt;build&amp;gt; &amp;lt;pluginManagement&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>JPA - Part 3</title>
      <link>https://sinujohn.github.io/2013/09/05/jpa-part-3/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/09/05/jpa-part-3/</guid>
      <description>Go to Part 1.
public class EmployeeListener { @PrePersist public void beforePersist(Employee e) { System.out.println(&amp;quot;Before persist&amp;quot;); } }
&amp;lt;h2&amp;gt;Merge Method&amp;lt;/h2&amp;gt; &amp;lt;div&amp;gt;- Used to synchronise the changes between objects and database tables.&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;- Adds a new row if the entity is not present in db table.&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;- Updates the existing row if it is present in table.&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;h3&amp;gt;Example:&amp;lt;/h3&amp;gt; et.begin(); &amp;hellip;. &amp;hellip;. em.merge(empObject); //merges the changes in empObject with table et.commit();</description>
    </item>
    
    <item>
      <title>JPA - Part 2</title>
      <link>https://sinujohn.github.io/2013/09/01/jpa-part-2/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/09/01/jpa-part-2/</guid>
      <description>This is continued from JPA: part 1.
@Column(name = &amp;quot;EMP_NAME&amp;quot;) private String name; //getters and setters  }
 this maps to Table: &amp;lt;strong&amp;gt;EMP&amp;lt;/strong&amp;gt;  | EMP_ID (PK) | EMP_NAME | |_____________|__________|
 JPA automatically maps &#39;int&#39; to &#39;NUMBER&#39; and &#39;String&#39; to &#39;CHAR&#39; or &#39;VARCHAR&#39;. But it cannot automatically convert Date or Time datatypes. So we need to specify the Temporal type to be used. (Temporal = related to time) &amp;lt;h2&amp;gt;Other Annotations:&amp;lt;/h2&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;@Temporal(TemporalType.</description>
    </item>
    
    <item>
      <title>JPA - Part 1</title>
      <link>https://sinujohn.github.io/2013/08/31/jpa-part-1/</link>
      <pubDate>Sat, 31 Aug 2013 00:10:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/08/31/jpa-part-1/</guid>
      <description>This post is part of Project Digitisation. I have decided to write about JPA in several posts. This is part 1 of the series.
//getters and setters  }
 this maps to &amp;lt;strong&amp;gt;Table: &amp;lt;/strong&amp;gt;Employee    empId name     _____ ____    </description>
    </item>
    
    <item>
      <title>Persistence Using Java</title>
      <link>https://sinujohn.github.io/2013/08/31/persistence-using-java/</link>
      <pubDate>Sat, 31 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/08/31/persistence-using-java/</guid>
      <description>Project Digitisation:I have decided to convert the notes that I have written into blogs :) This post and some posts that follow(about JPA) is part of that project.
There are several frameworks that are used for persisting objects in databases like JPA, Hibernate etc. (JPA is actually a specification. Hibernate is an implementation of JPA. Hibernate also has several extra features which are not specified by JPA).
This blog post mentions JDBC.</description>
    </item>
    
    <item>
      <title>Implementing a Search Engine</title>
      <link>https://sinujohn.github.io/2013/07/16/implementing-a-search-engine/</link>
      <pubDate>Tue, 16 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/07/16/implementing-a-search-engine/</guid>
      <description>The WordCount is a trivial problem. What is the next best problem to tackle in Map Reduce? Something in which I can create my own Readers,Writables etc?
I kept wondering about this for some time. And then decided on what about a Search Engine? After all, the concepts of BigData originated at the house of the Search giant Google (from the papers they published about Map Reduce, BigTable etc.)
The first step was to implement an Inverted Index.</description>
    </item>
    
    <item>
      <title>Map Reduce</title>
      <link>https://sinujohn.github.io/2013/07/16/map-reduce/</link>
      <pubDate>Tue, 16 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/07/16/map-reduce/</guid>
      <description>Everyone is saying that the world is going the cloud way. Big Data, Analytics etc are today&amp;rsquo;s buzzwords. I used to wonder what is so special about the cloud? I read a bit about Hadoop, HBase (the NoSQL DB for Hadoop) etc and came to know about the Map Reduce Framework.
Map Reduce is a framework which helps us to write program for the cloud. It is a simple framework. The MapReduce version of the Hello World program for Hadoop is the WordCount program.</description>
    </item>
    
    <item>
      <title>Observer Pattern</title>
      <link>https://sinujohn.github.io/2013/07/09/observer-pattern/</link>
      <pubDate>Tue, 09 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/07/09/observer-pattern/</guid>
      <description>Classification: Behavioral patterns Description : Define a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically.
This pattern is sometimes referred to as Listeners in some frameworks.
Read about the pattern here. The code sample can be found in my git repo.
In the example code I have done, there is a city, as with all cities many things can go wrong in a city.</description>
    </item>
    
    <item>
      <title>Singleton Pattern</title>
      <link>https://sinujohn.github.io/2013/06/12/singleton-pattern/</link>
      <pubDate>Wed, 12 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/06/12/singleton-pattern/</guid>
      <description>Classification: Creational Pattern Description : Ensure a class has only one instance, and provide a global point of access to it.
Whenever I hear about Singleton &amp;lsquo;Forever Alone&amp;rsquo; troll face comes to my mind ;)
In Singleton pattern, there will be only one object and wherever we want to use this class, this only object will be used. While creating this, we have to ensure that no more than one object is created for this class.</description>
    </item>
    
    <item>
      <title>Proxy Pattern</title>
      <link>https://sinujohn.github.io/2013/06/09/proxy-pattern/</link>
      <pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/06/09/proxy-pattern/</guid>
      <description>Classification: Structural Pattern(Proxy), Creational Pattern(Lazy Initialization)
Find the code example here.
In this pattern, we create a proxy for the original class that we are trying to use. This class will have all the methods(which we are interested in) of the original class and may or may not have extra methods. When we say proxy has the methods of original object, we mean the method signature. So using proxy object will be similar to using the real object.</description>
    </item>
    
    <item>
      <title>Starting Eclipse Plugin Development</title>
      <link>https://sinujohn.github.io/2013/06/06/starting-eclipse-plugin-development/</link>
      <pubDate>Thu, 06 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/06/06/starting-eclipse-plugin-development/</guid>
      <description>I had been developing an Eclipse plugin for the last few weeks. Starting out the plugin development for a person with no idea of Eclipse plugin environment is very difficult. Here I&amp;rsquo;ll point out to the sources that helped me to solve the problem.</description>
    </item>
    
    <item>
      <title>Visitor Pattern</title>
      <link>https://sinujohn.github.io/2013/06/06/visitor-pattern/</link>
      <pubDate>Thu, 06 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/06/06/visitor-pattern/</guid>
      <description>I had been reading about Design Patterns a while ago, and later dropped it after reading a few designs for reasons unknown. I carried on with my programming after that. Now when I look at the code that I&amp;rsquo;ve written(after reading the Design Patterns) I can see that I have unknowingly put some of the Design Patterns I had read about into the code I have done! Wow! :) Since it has helped me to code better I have decided to learn/revise atleast one new pattern once in a few days(or weeks for that matter ;) as am a bit lazy!</description>
    </item>
    
    <item>
      <title>AOP using AspectJ</title>
      <link>https://sinujohn.github.io/2013/05/09/aop-using-aspectj/</link>
      <pubDate>Thu, 09 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/05/09/aop-using-aspectj/</guid>
      <description>Even though I had heard about AOP, I didn&amp;rsquo;t take it seriously. I thought it was meant for Enterprise applications usage like Transaction management, logging etc. But recently I was faced with a problem - how to know an Object&amp;rsquo;s state changes in Java. As you know state of an Object is its properties, so what I want is to know when the state changes. I didn&amp;rsquo;t quite get what to do about it, and so posted in stackoverflow.</description>
    </item>
    
    <item>
      <title>Add jar libraries to the final jar file</title>
      <link>https://sinujohn.github.io/2011/06/22/add-jar-libraries/</link>
      <pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2011/06/22/add-jar-libraries/</guid>
      <description>When using Netbeans to create Java projects, you might be using extra library files (jar files), for example, twitter4j-core-2.2.3.jar. The default Netbeans packaging excludes these library files when you build the project. This will result in missing class files when you run the jar file. To prevent this we can add the jar files itself as part of the final application. For this do as follows:
  Add the library jar files into a folder within the project, say /lib</description>
    </item>
    
    <item>
      <title>Wah! Android!</title>
      <link>https://sinujohn.github.io/2010/11/06/wah-android/</link>
      <pubDate>Sat, 06 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2010/11/06/wah-android/</guid>
      <description>Last day, I happened to read about Android programming. I also tried their &amp;lsquo;Hello Android&amp;rsquo; program. I was really surprised (and happy) to know that Android programming is done in Java. That means I don&amp;rsquo;t have to learn any new languages. (Ofcourse we can program in C/C++, but thats a different case). But Android doesn&amp;rsquo;t use JVM to run these programs, instead it uses another VM called Dalvik VM. All android programs are under the control of this VM.</description>
    </item>
    
    <item>
      <title>Sending a file by HTTP POST</title>
      <link>https://sinujohn.github.io/2010/09/28/sending-a-file-by-http-post/</link>
      <pubDate>Tue, 28 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2010/09/28/sending-a-file-by-http-post/</guid>
      <description>///////////////////////////////////////////////////////////// //client.c // Send file to an HTTP server in small parts using POST // USAGE: client inputfile // // Compile: // gcc -o client client.c -lcurl // // Developer: // Sinu John - https://sinujohn.github.io/ // //////////////////////////////////////////////////////////////  #include&amp;lt;curl/curl.h&amp;gt;#include&amp;lt;fcntl.h&amp;gt;#include&amp;lt;unistd.h&amp;gt; //No. of bytes to be sent in one pass #define SIZELIMIT 100*1024  //#define _SEND_DEBUG_  int sendFile(const char *fileName, const char *url) // Sends file to &amp;#39;url&amp;#39; with an additional header &amp;#39;Count&amp;#39; (specifying count of the packet) { // An header &amp;#39;Filename&amp;#39; is also added  int COUNT=0; int fd = open(fileName, O_RDONLY); if(fd&amp;lt;0) { printf(&amp;#34;\nERROR: Cannot open the file\n&amp;#34;); return -1; } CURL *handle; char buf[SIZELIMIT]; //Data to be sent is stored in this buffer.</description>
    </item>
    
    <item>
      <title>j8085sim</title>
      <link>https://sinujohn.github.io/2010/07/24/j8085sim/</link>
      <pubDate>Sat, 24 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2010/07/24/j8085sim/</guid>
      <description>I just published my BTech miniproject - 8085sim, an 8085 simulator - on Sourceforge. Download it from here -http://sourceforge.net/projects/j8085sim/To get a valid name I added a &amp;lsquo;j&amp;rsquo; (short for Java) before the name, so it is now &amp;lsquo;j8085sim&amp;rsquo;.
This project is the result of about 5 weeks work by me and my team mates - Jinsmon Kurian and Deepu Devassy. Since the project demo is over, I believe this software should now be released.</description>
    </item>
    
  </channel>
</rss>