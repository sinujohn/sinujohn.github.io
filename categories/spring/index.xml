<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Sinu John</title>
    <link>https://sinujohn.github.io/categories/spring/</link>
    <description>Recent content in Spring on Sinu John</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-SA 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 26 Apr 2020 21:22:16 +0530</lastBuildDate>
    
	<atom:link href="https://sinujohn.github.io/categories/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Cloud Stream - using Functional constructs</title>
      <link>https://sinujohn.github.io/2020/04/26/spring-cloud-stream-using-functional-constructs/</link>
      <pubDate>Sun, 26 Apr 2020 21:22:16 +0530</pubDate>
      
      <guid>https://sinujohn.github.io/2020/04/26/spring-cloud-stream-using-functional-constructs/</guid>
      <description>Preface Spring Cloud Stream provides a framework to implement messaging in a clean way. The new version 3 brings functional paradigm to the Spring Cloud Stream framework where previously the annotations were used for the same. Docs explain it way better, but I will provide a succint way to get started. Read this after going through the docs. In this blog, I chose Kafka as the message broker.
Getting Started Add Dependencies  Cloud Stream Kafka  Adding Cloud Stream, lets us create Beans of type Function, Consumer or Supplier.</description>
    </item>
    
  </channel>
</rss>