<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tuts on Sinu John</title>
    <link>https://sinujohn.github.io/categories/tuts/</link>
    <description>Recent content in Tuts on Sinu John</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-SA 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 01 Jun 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sinujohn.github.io/categories/tuts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java - Add lib folder to classpath</title>
      <link>https://sinujohn.github.io/2016/06/01/java-add-lib-folder-to-classpath/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2016/06/01/java-add-lib-folder-to-classpath/</guid>
      <description>Adding non standard, non-maven, custom jars in a maven project is a common issue. And this SO post is usually the first googled result. But here is another easier way: Use addjars-maven-plugin. Its easier, no need to run any script, no installing of jars manually, or use the dreaded system scope. Using this also means, the shaded uber jar that gets created will contain the custom jars.
How to use?</description>
    </item>
    
    <item>
      <title>Authenticating using Facebook</title>
      <link>https://sinujohn.github.io/2015/03/12/authenticating-using-facebook/</link>
      <pubDate>Thu, 12 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2015/03/12/authenticating-using-facebook/</guid>
      <description>I had figured out how to authenticate users using Facebook a couple of months back. But I didn&amp;rsquo;t document it, and so yesterday I again wasted my time figuring it out. So here is the brain dumb so that I won&amp;rsquo;t waste my time again at the time of need. :)
Prerequisite: Create an appusing Facebook Developer account and create the necessary App ID and App Secret keys.
If you are testing out your app and you are running it locally, the site URL should be something likeÂ http://localhost:8090/</description>
    </item>
    
    <item>
      <title>Creating collection of Spring Beans</title>
      <link>https://sinujohn.github.io/2014/09/04/creating-collection-of-spring-beans/</link>
      <pubDate>Thu, 04 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/09/04/creating-collection-of-spring-beans/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JAX-RS</title>
      <link>https://sinujohn.github.io/2014/08/27/jax-rs/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/08/27/jax-rs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Creating a Maven Spring-REST project</title>
      <link>https://sinujohn.github.io/2014/02/19/creating-a-maven-spring-rest-project/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/02/19/creating-a-maven-spring-rest-project/</guid>
      <description>Open Eclipse. Make sure it is a recent version with m2e integration. I am using Kepler version of Eclipse. Now go to File &amp;gt; New &amp;gt; Maven Project. Click Next. Select maven-archetype-webapp. Click Next. Enter GroupID (group ID is the name that refers to a group of projects. It should be unique. A name like &amp;lsquo;com.companyname.yourname&amp;rsquo; would be suffice) and Artifact ID (Artifact ID is the project name. It should be unique within a groupID).</description>
    </item>
    
    <item>
      <title>Maven config for SLF4J and Logback</title>
      <link>https://sinujohn.github.io/2014/02/04/maven-config-for-slf4j-and-logback/</link>
      <pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2014/02/04/maven-config-for-slf4j-and-logback/</guid>
      <description>To use SLF4J and logback together, add the following to pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.5&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.13&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; Now SLF4J&amp;rsquo;s logger can be used:import org.slf4j.Logger; import org.slf4j.LoggerFactory; .... private final Logger logger = LoggerFactory.getLogger(MyClass.class); ... logger.debug(&amp;quot;Mandatory fields are missing&amp;quot;); If while running this in Eclipse or in console, it complains of some missing configuration, add thisto pom.xml:
&amp;lt;build&amp;gt; &amp;lt;pluginManagement&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>JPA - Part 3</title>
      <link>https://sinujohn.github.io/2013/09/05/jpa-part-3/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/09/05/jpa-part-3/</guid>
      <description>Go to Part 1.
public class EmployeeListener { @PrePersist public void beforePersist(Employee e) { System.out.println(&amp;quot;Before persist&amp;quot;); } }
&amp;lt;h2&amp;gt;Merge Method&amp;lt;/h2&amp;gt; &amp;lt;div&amp;gt;- Used to synchronise the changes between objects and database tables.&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;- Adds a new row if the entity is not present in db table.&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;- Updates the existing row if it is present in table.&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;h3&amp;gt;Example:&amp;lt;/h3&amp;gt; et.begin(); &amp;hellip;. &amp;hellip;. em.merge(empObject); //merges the changes in empObject with table et.commit();</description>
    </item>
    
    <item>
      <title>JPA - Part 2</title>
      <link>https://sinujohn.github.io/2013/09/01/jpa-part-2/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/09/01/jpa-part-2/</guid>
      <description>This is continued from JPA: part 1.
@Column(name = &amp;quot;EMP_NAME&amp;quot;) private String name; //getters and setters  }
 this maps to Table: &amp;lt;strong&amp;gt;EMP&amp;lt;/strong&amp;gt;  | EMP_ID (PK) | EMP_NAME | |_____________|__________|
 JPA automatically maps &#39;int&#39; to &#39;NUMBER&#39; and &#39;String&#39; to &#39;CHAR&#39; or &#39;VARCHAR&#39;. But it cannot automatically convert Date or Time datatypes. So we need to specify the Temporal type to be used. (Temporal = related to time) &amp;lt;h2&amp;gt;Other Annotations:&amp;lt;/h2&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;@Temporal(TemporalType.</description>
    </item>
    
    <item>
      <title>JPA - Part 1</title>
      <link>https://sinujohn.github.io/2013/08/31/jpa-part-1/</link>
      <pubDate>Sat, 31 Aug 2013 00:10:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/08/31/jpa-part-1/</guid>
      <description>This post is part of Project Digitisation. I have decided to write about JPA in several posts. This is part 1 of the series.
//getters and setters  }
 this maps to &amp;lt;strong&amp;gt;Table: &amp;lt;/strong&amp;gt;Employee    empId name     _____ ____    </description>
    </item>
    
    <item>
      <title>Observer Pattern</title>
      <link>https://sinujohn.github.io/2013/07/09/observer-pattern/</link>
      <pubDate>Tue, 09 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/07/09/observer-pattern/</guid>
      <description>Classification: Behavioral patterns Description : Define a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically.
This pattern is sometimes referred to as Listeners in some frameworks.
Read about the pattern here. The code sample can be found in my git repo.
In the example code I have done, there is a city, as with all cities many things can go wrong in a city.</description>
    </item>
    
    <item>
      <title>Singleton Pattern</title>
      <link>https://sinujohn.github.io/2013/06/12/singleton-pattern/</link>
      <pubDate>Wed, 12 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/06/12/singleton-pattern/</guid>
      <description>Classification: Creational Pattern Description : Ensure a class has only one instance, and provide a global point of access to it.
Whenever I hear about Singleton &amp;lsquo;Forever Alone&amp;rsquo; troll face comes to my mind ;)
In Singleton pattern, there will be only one object and wherever we want to use this class, this only object will be used. While creating this, we have to ensure that no more than one object is created for this class.</description>
    </item>
    
    <item>
      <title>Proxy Pattern</title>
      <link>https://sinujohn.github.io/2013/06/09/proxy-pattern/</link>
      <pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/06/09/proxy-pattern/</guid>
      <description>Classification: Structural Pattern(Proxy), Creational Pattern(Lazy Initialization)
Find the code example here.
In this pattern, we create a proxy for the original class that we are trying to use. This class will have all the methods(which we are interested in) of the original class and may or may not have extra methods. When we say proxy has the methods of original object, we mean the method signature. So using proxy object will be similar to using the real object.</description>
    </item>
    
    <item>
      <title>Visitor Pattern</title>
      <link>https://sinujohn.github.io/2013/06/06/visitor-pattern/</link>
      <pubDate>Thu, 06 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2013/06/06/visitor-pattern/</guid>
      <description>I had been reading about Design Patterns a while ago, and later dropped it after reading a few designs for reasons unknown. IÂ carried on with my programming after that. Now when I look at the code that I&amp;rsquo;ve written(after reading the Design Patterns) IÂ can see that I have unknowingly put some of the Design Patterns I had read about into the code I have done! Wow! :) Since it hasÂ helped me to code better I have decided to learn/revise atleast one new pattern once in a few days(or weeks for that matter ;)Â as am a bit lazy!</description>
    </item>
    
    <item>
      <title>Android OpenGL ES2.0 Template</title>
      <link>https://sinujohn.github.io/2011/10/20/android-opengl-es2-0-template/</link>
      <pubDate>Thu, 20 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2011/10/20/android-opengl-es2-0-template/</guid>
      <description>Learning OpenGLES 2.0 is easier on Android than on iOS because we can directly focus on OpenGLES implementation rather than wasting time on making the EGL bingings working properly. EGL stuffs are taken care of by android.opengl.GLSurfaceView.
OpenGL ES2.0 API is provided by &amp;lsquo;android.opengl.GLES20&amp;rsquo; package.
The naming convention sticks to the C version. Functions are implemented as static in GLES20 package. So they can be called like GLES20.function_name(). For example, the mappings are as follows from C to the Android Java version:</description>
    </item>
    
    <item>
      <title>Add jar libraries to the final jar file</title>
      <link>https://sinujohn.github.io/2011/06/22/add-jar-libraries/</link>
      <pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2011/06/22/add-jar-libraries/</guid>
      <description>When using Netbeans to create Java projects, you might be using extra library files (jar files), for example, twitter4j-core-2.2.3.jar. The default Netbeans packaging excludes these library files when you build the project. This will result in missing class files when you run the jar file. To prevent this we can add the jar files itself as part of the final application. For this do as follows:
  Add the library jar files into a folder within the project, say /lib</description>
    </item>
    
    <item>
      <title>Sending a file by HTTP POST</title>
      <link>https://sinujohn.github.io/2010/09/28/sending-a-file-by-http-post/</link>
      <pubDate>Tue, 28 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2010/09/28/sending-a-file-by-http-post/</guid>
      <description>///////////////////////////////////////////////////////////// //client.c // Send file to an HTTP server in small parts using POST // USAGE: client inputfile // // Compile: // gcc -o client client.c -lcurl // // Developer: // Sinu John - https://sinujohn.github.io/ // //////////////////////////////////////////////////////////////  #include&amp;lt;curl/curl.h&amp;gt;#include&amp;lt;fcntl.h&amp;gt;#include&amp;lt;unistd.h&amp;gt; //No. of bytes to be sent in one pass #define SIZELIMIT 100*1024  //#define _SEND_DEBUG_  int sendFile(const char *fileName, const char *url) // Sends file to &amp;#39;url&amp;#39; with an additional header &amp;#39;Count&amp;#39; (specifying count of the packet) { // An header &amp;#39;Filename&amp;#39; is also added  int COUNT=0; int fd = open(fileName, O_RDONLY); if(fd&amp;lt;0) { printf(&amp;#34;\nERROR: Cannot open the file\n&amp;#34;); return -1; } CURL *handle; char buf[SIZELIMIT]; //Data to be sent is stored in this buffer.</description>
    </item>
    
    <item>
      <title>Making âmakeâÂ work</title>
      <link>https://sinujohn.github.io/2010/09/04/making-make-work/</link>
      <pubDate>Sat, 04 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2010/09/04/making-make-work/</guid>
      <description>&amp;lsquo;make&amp;rsquo; is used to produce output files from several input files, although it is more usually used to compile programs.
This is a very short note of &amp;lsquo;make&amp;rsquo; utility, mostly made for my own reference :). The best way to study is to look at makefiles! &amp;lsquo;Beginning Linux Programming&amp;rsquo; by Neil Matthew and Richard Stones is a good book to start linux programming. It also mentions &amp;lsquo;make&amp;rsquo; utility.
&amp;lsquo;make&amp;rsquo; searches for a file &amp;lsquo;makefile&amp;rsquo; or &amp;lsquo;Makefile&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>After installing openSUSE 11.3</title>
      <link>https://sinujohn.github.io/2010/07/31/after-installing-opensuse-11-3/</link>
      <pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2010/07/31/after-installing-opensuse-11-3/</guid>
      <description>Now, you are ready to explore your openSUSE 11.3! Following steps are optional :)</description>
    </item>
    
    <item>
      <title>A quick introduction toÂ GCC</title>
      <link>https://sinujohn.github.io/2010/06/06/a-quick-introduction-to-gcc/</link>
      <pubDate>Sun, 06 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sinujohn.github.io/2010/06/06/a-quick-introduction-to-gcc/</guid>
      <description>GCC - GNU Compiler Collection
From GCC manual - When you invoke GCC, it normally does preprocessing, compilation, assembly and linking.Compile and Link a simple program: gcc -o hello.out hello.c This creates an executable &amp;lsquo;hello.out&amp;rsquo; from file &amp;lsquo;hello.c&amp;rsquo; -o specifies the output file.
Specify Language: Create a C file and save it as &amp;lsquo;hello.cpp&amp;rsquo;.
gcc -o hello.out hello.cpp This results in an error as gcc tries to perform C++ compilation(assumed from the extension .</description>
    </item>
    
  </channel>
</rss>